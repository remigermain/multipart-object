!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).toNestedObject={})}(this,(function(t){"use strict";function e(t){return e._isDigit.test(t)}function i(t){return["number","boolean","string"].includes(typeof t)}e._isDigit=RegExp(/^\d+$/);const r={separator:"bracket"};function n(t,e=r){const i={};function n(t,i){return null==t?i:"dot"===(null==e?void 0:e.separator)?`${t}.${i}`:`${t}[${i}]`}return e=Object.assign(Object.assign({},r),e),function t(e,r){Object.keys(r).forEach((s=>{const o=r[s];if(o instanceof Array||o instanceof Object&&!(o instanceof Blob))t(n(e,s),r[s]);else{const t=n(e,s);i[t]=o}}))}(null,t),i}t.NestedParser=class{constructor(t,e=r){this.data=t,this._valid=null,this._validateData={},this._errors=null,this._options=Object.assign(Object.assign({},r),e)}splitKey(t){const e=[];let i=-2;if(t.split(/\[|\]/).forEach((t=>{t&&(i+=t.length+2,e.push(t))})),t.length!=i||0==e.length)throw new Error(`invalid format from key ${t}`);return e}setType(t,e,r,n){if(t instanceof Array){const s=parseInt(e);if(t.length<s)throw new Error(`key "${n}" is upper than actual list`);if(t.length==s)t.push(r);else if(i(t[s]))throw new Error(`invalid rewrite key from "${n}" to "${t}"`)}else if(e in t){if(i(r))throw new Error(`invalid rewrite key from "${n}" to "${t}"`)}else t[e]=r}decompile(t){const i={};return Object.keys(t).forEach((r=>{const n=this.splitKey(r.replace(/\s/g,""));let s=i,o=-1;for(;++o<n.length-1;){const t=e(n[o+1])?[]:{},i=n[o];this.setType(s,i,t,r),s=s[i]}this.setType(s,n[o],t[r],r)})),i}isValid(){this._valid=!1;try{this._validateData=this.decompile(this.data),this._valid=!0}catch(t){this._errors=t}return this._valid}get validateData(){if(null===this._valid)throw new Error("You need to be call is_valid() before access validate_data");if(!1===this._valid)throw new Error("You can't get validate data");return this._validateData}get errors(){return this._errors}},t.nestedMultiPart=n,t.nestedMultiPartForm=function(t,e=r){const i=n(t,e),s=new FormData;return Object.keys(i).forEach((t=>{const e=i[t];"number"==typeof e||"boolean"==typeof e?s.append(t,e.toString()):s.append(t,e)})),s},Object.defineProperty(t,"__esModule",{value:!0})}));
